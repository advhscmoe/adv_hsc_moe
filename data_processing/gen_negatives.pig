set mapred.output.compress true
set pig.splitCombination true
set pig.maxCombinedSplitSize 1073741824
set pig.minCombinedSplitSize 1073741824
set mapreduce.job.reduce.slowstart.completedmaps 1.0
set mapred.reduce.tasks.speculative.execution true
set mapred.map.tasks.speculative.execution true
set job.name 'gen_negatives'

SET output.compression.enabled true;
SET output.compression.codec org.apache.hadoop.io.compress.GzipCodec;
REGISTER 'jyson-1.0.2/lib/jyson-1.0.2.jar';
REGISTER 'amazon_data_udf.py' using jython AS udf;

%DEFAULT input_file '$HDFS_ROOT/amazon_data_processed/user_aggregated.item_aggregated.tsv'
%DEFAULT output_file '$HDFS_ROOT/amazon_data_processed/user_item_aggregated.with_negatives.tsv'
%DEFAULT num_parallel 1000

/*
%DEFAULT input_file 'y'
%DEFAULT output_file 'q'
%DEFAULT num_parallel 1
*/


loaded = load '$input_file' using PigStorage('\t', '-schema');

generated = foreach loaded generate asin_hist, price_hist, overall_hist, brand_hist,
        unixReviewTime_hist, category_hist, overall, reviewerID, asin, reviewText,
        summary, unixReviewTime, category, description, title, also_buy, feature,
        rank, price, also_view, details, flatten(udf.top_categories(category)) as (top_cat, next_cat),
        main_cat, similar_item, brand, asin_overall_cnt_1,
        asin_overall_cnt_2,
        asin_overall_cnt_3, asin_overall_cnt_4, asin_overall_cnt_5, asin_overall_cnt,
        reviewer_overall_cnt_1,
        reviewer_overall_cnt_2, reviewer_overall_cnt_3, reviewer_overall_cnt_4,
        reviewer_overall_cnt_5,  reviewer_overall_cnt, ROUND(RANDOM() * 100000000) as rand;

counted = foreach (group generated by top_cat parallel $num_parallel) {
    generate COUNT(generated) as top_cat_size, flatten(generated) as (
        asin_hist, price_hist, overall_hist, brand_hist,
        unixReviewTime_hist, category_hist, overall, reviewerID, asin, reviewText,
        summary, unixReviewTime, category, description, title, also_buy, feature,
        rank, price, also_view, details, top_cat, next_cat,
        main_cat, similar_item, brand, asin_overall_cnt_1,
        asin_overall_cnt_2,
        asin_overall_cnt_3, asin_overall_cnt_4, asin_overall_cnt_5, asin_overall_cnt,
        reviewer_overall_cnt_1,
        reviewer_overall_cnt_2, reviewer_overall_cnt_3, reviewer_overall_cnt_4,
        reviewer_overall_cnt_5,  reviewer_overall_cnt, rand
    );
};

sharded = foreach counted generate (chararray)top_cat_size as top_cat_size,
        asin_hist, price_hist, overall_hist, brand_hist,
        unixReviewTime_hist, category_hist, overall, reviewerID, asin, reviewText,
        summary, unixReviewTime, category, description, title, also_buy, feature,
        rank, price, also_view, details, top_cat, next_cat,
        main_cat, similar_item, brand, asin_overall_cnt_1,
        asin_overall_cnt_2,
        asin_overall_cnt_3, asin_overall_cnt_4, asin_overall_cnt_5, asin_overall_cnt,
        reviewer_overall_cnt_1,
        reviewer_overall_cnt_2, reviewer_overall_cnt_3, reviewer_overall_cnt_4,
        reviewer_overall_cnt_5,  reviewer_overall_cnt, rand % (top_cat_size / 30000 + 1) as rand;

negatives = foreach (group sharded by (top_cat, rand) parallel $num_parallel) {
    generate flatten(udf.gen_negatives(sharded)) as (top_cat_size,
        asin_hist, price_hist, overall_hist, brand_hist,
        unixReviewTime_hist, category_hist, overall, reviewerID, asin, reviewText,
        summary, unixReviewTime, category, description, title, also_buy, feature,
        rank, price, also_view, details, top_cat, next_cat,
        main_cat, similar_item, brand, asin_overall_cnt_1,
        asin_overall_cnt_2,
        asin_overall_cnt_3, asin_overall_cnt_4, asin_overall_cnt_5, asin_overall_cnt,
        reviewer_overall_cnt_1,
        reviewer_overall_cnt_2, reviewer_overall_cnt_3, reviewer_overall_cnt_4,
        reviewer_overall_cnt_5,  reviewer_overall_cnt, rand);
}

unioned = UNION sharded, negatives;

ret = foreach (group unioned by reviewerID parallel $num_parallel) {
        generate flatten(unioned) as (top_cat_size,
        asin_hist, price_hist, overall_hist, brand_hist,
        unixReviewTime_hist, category_hist, overall, reviewerID, asin, reviewText,
        summary, unixReviewTime, category, description, title, also_buy, feature,
        rank, price, also_view, details, top_cat, next_cat,
        main_cat, similar_item, brand, asin_overall_cnt_1,
        asin_overall_cnt_2,
        asin_overall_cnt_3, asin_overall_cnt_4, asin_overall_cnt_5, asin_overall_cnt,
        reviewer_overall_cnt_1,
        reviewer_overall_cnt_2, reviewer_overall_cnt_3, reviewer_overall_cnt_4,
        reviewer_overall_cnt_5,  reviewer_overall_cnt, rand);
}

rmf $output_file
STORE ret into '$output_file' using PigStorage('\t', '-schema');
